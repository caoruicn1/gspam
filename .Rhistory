# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 1
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam.cv(X,y,prox_type,"quad")
end.time <- Sys.time()
devtools::load_all(".")
start.time <- Sys.time()
results <- gspam.cv(X,y,prox_type,"quad")
end.time <- Sys.time()
end.time-start.time
results
results$mses
plot(results$mses)
plot(log(lambda1),results$mses)
plot(log(results$lambda1),results$mses)
which.min(results$mses)
results$lambda1[which.min(results$mses)]
gspam.cv <- function(data,y,prox_type,loss_type,alpha=0.5,k=10){
# Get lambda vector to do cv over frow full data
lambdas <- get_lambdas(data,y,prox_type,loss_type,alpha)
lambda1 <- lambdas$lambda1
lambda2 <- lambdas$lambda2
# Randomly shuffle the data
randomizer <- sample(nrow(data))
rand_X <- data[randomizer,]
rand_y <- y[randomizer]
# Create k equally size folds
folds <- cut(seq(1,nrow(data)),breaks=k,labels=FALSE)
# Perform k fold cross validation
mselist <- matrix(rep(0,k*100),ncol=k)
for(i in 1:k){
testIndexes <- which(folds==k,arr.ind=TRUE)
testX <- rand_X[testIndexes, ]
testy <- rand_y[testIndexes]
trainX <- rand_X[-testIndexes, ]
trainy <- rand_y[-testIndexes]
result <- gspam_c_vec(trainX,trainy,prox_type,"quad",lambda1,lambda2)
test_fits <- c()
for(i in 1:100){
fits <- c()
for(j in 1: nrow(testX)){
fits[j] <- interpolate(trainX,result$fitted[[i]],testX[j,])
}
test_fits[[i]] <- fits
}
mse <- c()
for(i in 1:100){
mse[i] <- mean((testy-test_fits[[i]])^2)
}
mselist[,k] <- mse
}
best_lambda1 <- lambda1[which.min(mses)]
return(list("mses" = rowMeans(mselist),"lambda1"=lambda1,"best_lambda1" = best_lambda1))
}
start.time <- Sys.time()
results <- gspam.cv(X,y,prox_type,"quad")
end.time <- Sys.time()
gspam.cv <- function(data,y,prox_type,loss_type,alpha=0.5,k=10){
# Get lambda vector to do cv over frow full data
lambdas <- get_lambdas(data,y,prox_type,loss_type,alpha)
lambda1 <- lambdas$lambda1
lambda2 <- lambdas$lambda2
# Randomly shuffle the data
randomizer <- sample(nrow(data))
rand_X <- data[randomizer,]
rand_y <- y[randomizer]
# Create k equally size folds
folds <- cut(seq(1,nrow(data)),breaks=k,labels=FALSE)
# Perform k fold cross validation
mselist <- matrix(rep(0,k*100),ncol=k)
for(i in 1:k){
testIndexes <- which(folds==k,arr.ind=TRUE)
testX <- rand_X[testIndexes, ]
testy <- rand_y[testIndexes]
trainX <- rand_X[-testIndexes, ]
trainy <- rand_y[-testIndexes]
result <- gspam_c_vec(trainX,trainy,prox_type,"quad",lambda1,lambda2)
test_fits <- c()
for(i in 1:100){
fits <- c()
for(j in 1: nrow(testX)){
fits[j] <- interpolate(trainX,result$fitted[[i]],testX[j,])
}
test_fits[[i]] <- fits
}
mse <- c()
for(i in 1:100){
mse[i] <- mean((testy-test_fits[[i]])^2)
}
mselist[,k] <- mse
}
best_lambda1 <- lambda1[which.min(mselist)]
return(list("mses" = rowMeans(mselist),"lambda1"=lambda1,"best_lambda1" = best_lambda1))
}
start.time <- Sys.time()
results <- gspam.cv(X,y,prox_type,"quad")
end.time <- Sys.time()
end.time-start.time
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
results <- gspam_full(X,y,prox_type,"quad",0.5)
results
library(gspam)
devtools::load_all(".")
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
results <- gspam_full(X,y,prox_type,"quad",0.5)
results
results$fitted
results$fitted[[11]]
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
library(gspam)
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 1000
p <- 1000
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
jkl
\
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results
results$fitted[1]
results$fitted[20]
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[1]
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[1]
results$fitted[20]
results$fitted[100]
results$fitted[50]
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[1]
results$fitted[100]
results$fitted[99]
results$fitted[98]
results$fitted[50]
results$fitted[20]
plot(results$fitted[[1]][,2])
plot(results$fitted[[20]][,2])
plot(results$fitted[[50]][,2])
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
devtools::load_all(".")
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[100]
results$fitted[90]
results$fitted[80]
results$fitted[50]
Sig
sig
sig %*% beta
context("test-cv")
library(gspam)
test_that("cv valgrind", {
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
})
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[100]
results$fitted[30]
results$fitted[70]
results$fitted[50]
results$fitted[90]
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 10
p <- 10
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[1]
results$fitted[100]
# TESTS
set.seed(1408)
# FL prox, Quad loss
# Num trials
N <- 10
# Set Params
n <- 100
p <- 100
s <- 5
alpha <- 0.5
X <- matrix(rnorm(n*p),ncol=p)
beta <- c(rep(1,s),rep(0,p-s))
sig <- sign(X)
y <- rnorm(n)+sig %*% beta
prox_type <- rep("fl",p)
start.time <- Sys.time()
results <- gspam_full(X,y,prox_type,"quad",0.5)
end.time <- Sys.time()
end.time-start.time
results$fitted[1]
